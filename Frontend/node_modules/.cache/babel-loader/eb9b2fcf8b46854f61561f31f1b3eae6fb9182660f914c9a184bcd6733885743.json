{"ast":null,"code":"var _jsxFileName = \"/Users/hussamkhan/Desktop/AI-Travel-App/Frontend/src/LoadMap.js\",\n  _s = $RefreshSig$();\n// Imports React, Google Map and the map markers from google\nimport React, { useState, useRef } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport './Styles/LoadMap.css';\nimport axios from 'axios';\n\n// containerStyle sets the size of the Google Map\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoadMap() {\n  _s();\n  const containerStyle = {\n    width: '100%',\n    height: '650px'\n  };\n  // The centre of the map is London when the page is opened\n  const defaultCentre = {\n    lat: 51.5074456,\n    lng: -0.1277653\n  };\n  const [location, setLocation] = useState('');\n  const [mapMarkers, setMapMarkers] = useState([]);\n  const [selectedMapMarkers, setSelectedMapMarkers] = useState(null);\n  const [PopupBox, setPopupBox] = useState(false);\n  const [centre, setCentre] = useState(defaultCentre);\n  const mapRef = useRef(null);\n  const newLocation = e => {\n    setLocation(e.target.value);\n  };\n  // This fetches wheelchair accessible places from OpenStreetMap\n  // using the latitude and llongitude of the location\n  const fetchWheelchairAccessiblePlaces = async (lat, lon) => {\n    const query = `\n      [out:json];\n      (\n        node[wheelchair](around:2000,${lat},${lon});\n        way[wheelchair](around:2000,${lat},${lon});\n        relation[wheelchair](around:2000,${lat},${lon});\n      );\n      out center;\n    `;\n    try {\n      const response = await fetch(\"https://overpass-api.de/api/interpreter\", {\n        method: \"POST\",\n        body: query\n      });\n      const data = await response.json();\n\n      // This iterates through the data JSON to get the latitude and longitude\n      const markers = data.elements.map(element => {\n        var _element$tags, _element$tags2, _element$tags3;\n        const coords = element.type === \"node\" ? {\n          lat: element.lat,\n          lng: element.lon\n        } : {\n          lat: element.center.lat,\n          lng: element.center.lon\n        };\n        const iswheelchairAccessible = ((_element$tags = element.tags) === null || _element$tags === void 0 ? void 0 : _element$tags.wheelchair) || \"unknown\";\n\n        // Colour coding indicates if a place is fully wheelchair accessible or not\n        let markerColour = 'gray';\n        if (iswheelchairAccessible === \"yes\") {\n          markerColour = 'green';\n        } else if (iswheelchairAccessible === \"limited\") {\n          markerColour = 'orange';\n        } else if (iswheelchairAccessible === \"no\") {\n          markerColour = 'red';\n        }\n        return {\n          lat: coords.lat,\n          lng: coords.lng,\n          name: ((_element$tags2 = element.tags) === null || _element$tags2 === void 0 ? void 0 : _element$tags2.name) || \"Place name unavaliable\",\n          wheelchair: iswheelchairAccessible,\n          description: ((_element$tags3 = element.tags) === null || _element$tags3 === void 0 ? void 0 : _element$tags3[\"wheelchair:description\"]) || \"Description of accessibility not given\",\n          markerColor: markerColour\n        };\n      });\n      return markers;\n    } catch (error) {\n      console.error(\"Error fetching Overpass API data:\", error);\n      return [];\n    }\n  };\n  const submitForm = async e => {\n    e.preventDefault();\n    const geocoder = new window.google.maps.Geocoder();\n    // Geocoder converts the user input into coordinates of longitude and latitude\n    geocoder.geocode({\n      address: location\n    }, async (results, status) => {\n      if (status === 'OK' && results.length > 0) {\n        const coords = results[0].geometry.location;\n        const lat = coords.lat();\n        const lng = coords.lng();\n        setCentre({\n          lat,\n          lng\n        });\n\n        // Fetch only wheelchair accessible places\n        const accessibleMarkers = await fetchWheelchairAccessiblePlaces(lat, lng);\n        setMapMarkers(accessibleMarkers);\n      } else {\n        alert('Location not found.');\n      }\n    });\n  };\n  // Sends the name of the place to the database\n  const addToItinerary = async (placeName, wheelchair, location) => {\n    try {\n      const userID = localStorage.getItem(\"userID\");\n      console.log(\"The user id is: \", userID);\n      if (!userID) {\n        alert(\"Please log in to add flights\");\n        return;\n      }\n      const response = await axios.post(\"http://127.0.0.1:8000/addToItinerary/\", {\n        name: placeName,\n        isWheelchairAccessible: wheelchair,\n        city: location,\n        userID: userID\n      });\n      alert(response.data.message || \"Added to itinerary\");\n    } catch (error) {\n      console.error(error);\n      alert(\"We were unable to add attraction\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Find Wheelchair Accessible Places\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitForm,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Location:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your Location\",\n          value: location,\n          onChange: newLocation,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          type: \"submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      libraries: ['places'],\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: centre,\n        zoom: 12,\n        onLoad: map => mapRef.current = map,\n        children: [\" \", mapMarkers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: marker.lat,\n            lng: marker.lng\n          },\n          icon: {\n            url: `http://maps.google.com/mapfiles/ms/icons/${marker.markerColor}-dot.png`,\n            scaledSize: new window.google.maps.Size(20, 20)\n          },\n          onClick: () => {\n            setSelectedMapMarkers(marker);\n            setPopupBox(true);\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), PopupBox && selectedMapMarkers && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-backdrop\",\n      onClick: () => setPopupBox(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-box\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedMapMarkers.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Wheelchair Accessible:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this), selectedMapMarkers.wheelchair === \"yes\" && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Fully Accessible\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this), selectedMapMarkers.wheelchair === \"limited\" && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Partially Accessible\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this), selectedMapMarkers.wheelchair === \"no\" && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Not Accessible\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this), selectedMapMarkers.wheelchair === \"unknown\" && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Accessibility Unknown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addToItinerary(selectedMapMarkers.name, selectedMapMarkers.wheelchair, location),\n          children: \"Add Place\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setPopupBox(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(LoadMap, \"iK7jSU06kHzO2Od9l5cujOnN1bo=\");\n_c = LoadMap;\nexport default LoadMap;\nvar _c;\n$RefreshReg$(_c, \"LoadMap\");","map":{"version":3,"names":["React","useState","useRef","GoogleMap","LoadScript","Marker","axios","jsxDEV","_jsxDEV","LoadMap","_s","containerStyle","width","height","defaultCentre","lat","lng","location","setLocation","mapMarkers","setMapMarkers","selectedMapMarkers","setSelectedMapMarkers","PopupBox","setPopupBox","centre","setCentre","mapRef","newLocation","e","target","value","fetchWheelchairAccessiblePlaces","lon","query","response","fetch","method","body","data","json","markers","elements","map","element","_element$tags","_element$tags2","_element$tags3","coords","type","center","iswheelchairAccessible","tags","wheelchair","markerColour","name","description","markerColor","error","console","submitForm","preventDefault","geocoder","window","google","maps","Geocoder","geocode","address","results","status","length","geometry","accessibleMarkers","alert","addToItinerary","placeName","userID","localStorage","getItem","log","post","isWheelchairAccessible","city","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","onChange","required","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","libraries","mapContainerStyle","zoom","onLoad","current","marker","index","position","icon","url","scaledSize","Size","onClick","stopPropagation","_c","$RefreshReg$"],"sources":["/Users/hussamkhan/Desktop/AI-Travel-App/Frontend/src/LoadMap.js"],"sourcesContent":["// Imports React, Google Map and the map markers from google\nimport React, { useState, useRef } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport './Styles/LoadMap.css';\nimport axios from 'axios';\n\n// containerStyle sets the size of the Google Map\nfunction LoadMap() {\n  const containerStyle = {\n    width: '100%',\n    height: '650px'\n  };\n// The centre of the map is London when the page is opened\n  const defaultCentre = {\n    lat: 51.5074456,\n    lng: -0.1277653\n  };\n\n  const [location, setLocation] = useState('');\n  const [mapMarkers, setMapMarkers] = useState([]);\n  const [selectedMapMarkers, setSelectedMapMarkers] = useState(null);\n  const [PopupBox, setPopupBox] = useState(false);\n  const [centre, setCentre] = useState(defaultCentre);\n  const mapRef = useRef(null);\n\n  const newLocation = (e) => {\n    setLocation(e.target.value);\n  };\n  // This fetches wheelchair accessible places from OpenStreetMap\n  // using the latitude and llongitude of the location\n  const fetchWheelchairAccessiblePlaces = async (lat, lon) => {\n    const query = `\n      [out:json];\n      (\n        node[wheelchair](around:2000,${lat},${lon});\n        way[wheelchair](around:2000,${lat},${lon});\n        relation[wheelchair](around:2000,${lat},${lon});\n      );\n      out center;\n    `;\n    try {\n      const response = await fetch(\"https://overpass-api.de/api/interpreter\", {\n        method: \"POST\",\n        body: query,\n      });\n\n      const data = await response.json();\n\n      // This iterates through the data JSON to get the latitude and longitude\n      const markers = data.elements.map((element) => {\n        const coords = element.type === \"node\"\n          ? { lat: element.lat, lng: element.lon }\n          : { lat: element.center.lat, lng: element.center.lon };\n\n        const iswheelchairAccessible = element.tags?.wheelchair || \"unknown\";\n\n        // Colour coding indicates if a place is fully wheelchair accessible or not\n        let markerColour = 'gray';\n        if (iswheelchairAccessible === \"yes\") {\n          markerColour = 'green';\n        } else if (iswheelchairAccessible === \"limited\") {\n          markerColour = 'orange';\n        } else if (iswheelchairAccessible === \"no\") {\n          markerColour = 'red';\n        }\n\n        return {\n          lat: coords.lat,\n          lng: coords.lng,\n          name: element.tags?.name || \"Place name unavaliable\",\n          wheelchair: iswheelchairAccessible,\n          description: element.tags?.[\"wheelchair:description\"] || \"Description of accessibility not given\",\n          markerColor: markerColour,\n        };\n      });\n\n      return markers;\n    } catch (error) {\n      console.error(\"Error fetching Overpass API data:\", error);\n      return [];\n    }\n  };\n\n  const submitForm = async (e) => {\n    e.preventDefault();\n\n    const geocoder = new window.google.maps.Geocoder();\n    // Geocoder converts the user input into coordinates of longitude and latitude\n    geocoder.geocode({ address: location }, async (results, status) => {\n      if (status === 'OK' && results.length > 0) {\n        const coords = results[0].geometry.location;\n        const lat = coords.lat();\n        const lng = coords.lng();\n      \n\n        setCentre({ lat, lng });\n\n        // Fetch only wheelchair accessible places\n        const accessibleMarkers = await fetchWheelchairAccessiblePlaces(lat, lng);\n        setMapMarkers(accessibleMarkers);\n\n      } else {\n        alert('Location not found.');\n      }\n    });\n  };\n// Sends the name of the place to the database\n  const addToItinerary = async (placeName, wheelchair, location) => {\n    try {\n      const userID = localStorage.getItem(\"userID\")\n      console.log(\"The user id is: \", userID)\n        if(!userID) {\n            alert(\"Please log in to add flights\")\n            return\n        }\n      const response = await axios.post(\"http://127.0.0.1:8000/addToItinerary/\", { name: placeName, isWheelchairAccessible: wheelchair, city: location, userID: userID });\n      alert(response.data.message || \"Added to itinerary\");\n    } catch (error) {\n      console.error(error);\n      alert(\"We were unable to add attraction\");\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Find Wheelchair Accessible Places</h1>\n      <form onSubmit={submitForm}>\n        <div className=\"location\">\n          <label>Location:</label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter your Location\"\n            value={location}\n            onChange={newLocation}\n            required\n          />\n          <button className=\"submit-button\" type=\"submit\">Search</button>\n        </div>\n      </form>\n      {/* The API key for Google Maps Places API */}\n      <LoadScript\n        googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}\n        libraries={['places']}\n      >\n        <GoogleMap\n          mapContainerStyle={containerStyle}\n          center={centre}\n          zoom={12}\n          onLoad={map => (mapRef.current = map)}\n        > {/* iterates through each map marker to change the icon to its colour coded one */}\n          {mapMarkers.map((marker, index) => (\n            <Marker\n              key={index}\n              position={{ lat: marker.lat, lng: marker.lng }}\n              icon={{\n                url: `http://maps.google.com/mapfiles/ms/icons/${marker.markerColor}-dot.png`,\n                scaledSize: new window.google.maps.Size(20, 20), \n              }}\n              onClick={() => {\n                setSelectedMapMarkers(marker);\n                setPopupBox(true);\n              }}\n            />\n          ))}\n        </GoogleMap>\n      </LoadScript>\n      \n      {/* This is the popup box which shows the name of the place and wheelchair accessibility */}\n      {PopupBox && selectedMapMarkers && (\n        <div className=\"modal-backdrop\" onClick={() => setPopupBox(false)}>\n          <div className=\"modal-box\" onClick={e => e.stopPropagation()}>\n            <h2>{selectedMapMarkers.name}</h2>\n\n            <p>\n              <strong>Wheelchair Accessible:</strong>\n              {selectedMapMarkers.wheelchair === \"yes\" && (\n                <span>\n                  Fully Accessible\n\n                </span>\n              )}\n              {selectedMapMarkers.wheelchair === \"limited\" && (\n                <span>\n                  Partially Accessible\n                </span>\n              )}\n              {selectedMapMarkers.wheelchair === \"no\" && (\n                <span>\n                  Not Accessible\n                </span>\n              )}\n              {selectedMapMarkers.wheelchair === \"unknown\" && (\n                <span>\n                  Accessibility Unknown\n                </span>\n              )}\n            </p>\n\n\n            <button onClick={() => addToItinerary(selectedMapMarkers.name, selectedMapMarkers.wheelchair, location)}>Add Place</button>\n\n            <button onClick={() => setPopupBox(false)}>Close</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default LoadMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}